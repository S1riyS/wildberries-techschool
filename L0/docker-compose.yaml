services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
        - kafka-net

  kafka:
    image: confluentinc/cp-kafka:7.4.10
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" 
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1" 
    networks:
        - kafka-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "9020:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
        - kafka-net

  postgres:
    image: postgres:14
    container_name: postgres
    ports:
      - "${DB_PORT}:5432"
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  backend:
    build: ./server
    container_name: backend
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: unless-stopped
    env_file: "./server/configs/.env.prod"
    networks:
      - app-net
      - kafka-net

  job_producer:
    build:
      context: server
      dockerfile: producer.Dockerfile
    restart: unless-stopped
    container_name: job_producer
    depends_on:
      kafka:
        condition: service_started
    env_file: "./server/configs/.env.prod"
    networks:
      - kafka-net

volumes:
  postgres_data:

networks:
    kafka-net:
    app-net: